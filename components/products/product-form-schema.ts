import { z } from "zod";

// Define the list of allowed currencies based on the spec (docs/front-end-ui.md line 171)
export const allowedCurrencies = [
  'USD', 'GBP', 'EUR', 'CHF', 'SGD', 'HKD',
  'CNY', 'JPY', 'CAD', 'AUD', 'NZD'
] as const;

export const allowedProductUnits = [
  'pc', 'box', 'kit', 'kg', 'hr'
] as const;

export const allowedProductStatuses = [
  'Active', 'Inactive'
] as const;

export const additionalPriceSchema = z.object({
  id: z.string().optional(), // For react-hook-form key management, not for DB
  currency_code: z.enum(allowedCurrencies, {
    required_error: "Currency is required for additional price.",
  }),
  price: z.number({
    required_error: "Price is required for additional price.",
    invalid_type_error: "Price must be a number.",
  }).min(0, { message: "Price cannot be negative." }),
});

export const productFormSchema = z.object({
  name: z.string().min(1, { message: "Product Name is required." }).max(120, { message: "Name cannot exceed 120 characters." }),
  // SKU is generated by the server, so not part of the form input for creation,
  // but might be displayed or used as an identifier for updates.
  // For create form, it's not submitted by user.
  unit: z.enum(allowedProductUnits, {
    required_error: "Unit is required.",
  }),
  base_price: z.number({
    required_error: "Base Price is required.",
    invalid_type_error: "Base Price must be a number.",
  }).min(0, { message: "Base Price cannot be negative." }),
  status: z.enum(allowedProductStatuses, {
    required_error: "Status is required.",
  }).default('Active'),
  description: z.string().max(10000, { message: "Description cannot exceed 10,000 characters." }).optional().or(z.literal('')),
  additional_prices: z.array(additionalPriceSchema).optional(),
});

export type ProductFormData = z.infer<typeof productFormSchema>;
export type AdditionalPriceFormData = z.infer<typeof additionalPriceSchema>;